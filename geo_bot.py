from telegram.ext import Updater, MessageHandler, Filters, CommandHandler, ConversationHandler
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
import requests
import random
import codecs



def file_reader(file_name):
    file = codecs.open("capitals1.txt", "r", "utf-8")
    string = file.readlines()
    file.close()
    string = list(map(lambda x: x.strip(), string))
    info = {}
    for i in string:
        info[i.split("\t")[0]] = i.split("\t")[1]
    return info


def get_ll_spn(toponym):
    ll = list(map(lambda x: str(x), toponym["Point"]["pos"].split()))
    lowercorner = list(map(lambda x: float(x), toponym["boundedBy"]["Envelope"]["lowerCorner"].split()))
    uppercorner = list(map(lambda x: float(x), toponym["boundedBy"]["Envelope"]["upperCorner"].split()))
    spn = list(map(lambda x: str(x), [uppercorner[0] - lowercorner[0], uppercorner[1] - lowercorner[1]]))
    return ll, spn


def photo(bot, update, address, text_map=False):
    if text_map:
        text = "–°—Ç–æ–ª–∏—Ü–∞ —Å—Ç—Ä–∞–Ω—ã {} - {}".format(address, info[address])
    else:
        text = "–°—Ç—Ä–∞–Ω–∞ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∞ –º–µ—Ç–∫–æ–π"
    answer = geocode(address)
    if answer:
        bot.sendPhoto(
            update.message.chat.id,  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞. –ö—É–¥–∞ –ø–æ—Å—ã–ª–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É.
            # –°—Å—ã–ª–∫–∞ –Ω–∞ static API –ø–æ —Å—É—Ç–∏ —è–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É.
            answer,
            text)
    else:
        update.message.reply_text("–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")


def start(bot, update, user_data):
    update.message.reply_text('''
    –ü—Ä–∏–≤–µ—Ç!‚úã
–Ø –ì–µ–æ–ë–æ—Ç, –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.üòâ
–ß—Ç–æ —è —É–º–µ—é:
/text_test - —Ç–µ—Å—Ç
/photo_test - —Ç–æ–∂–µ —Ç–µ—Å—Ç, –Ω–æ –Ω–µ–º–Ω–æ–≥–æ –¥—Ä—É–≥–æ–π
/game - –∏–≥—Ä–∞ "–í–µ—Ä—é - –Ω–µ –≤–µ—Ä—é"
/teach *—Å—Ç—Ä–∞–Ω–∞* - –æ–±—É—á–µ–Ω–∏–µ 	
–ò—Ç–∞–∫, –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ. 
–¢–µ—Å—Ç ‚Ññ1 - —è –ø–∏—à—É —Ç–µ–±–µ —Å—Ç–æ–ª–∏—Ü—É, –∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –≤ –æ—Ç–≤–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Å—Ç—Ä–∞–Ω—É
–¢–µ—Å—Ç ‚Ññ2 - —è –ø—Ä–∏—Å—ã–ª–∞—é —Ç–µ–±–µ –∫–∞—Ä—Ç—É —Å—Ç—Ä–∞–Ω—ã, –∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –≤ –æ—Ç–≤–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –µ–µ —Å—Ç–æ–ª–∏—Ü—É
–ò–≥—Ä–∞ - —è –ø—Ä–∏—Å—ã–ª–∞—é —Ç–µ–±–µ –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—Å—Ç—Ä–∞–Ω–∞ - —Å—Ç–æ–ª–∏—Ü–∞", –∞ —Ç—ã –æ—Ç–≤–µ—á–∞–µ—à—å - –≤–µ—Ä–∏—à—å –∏–ª–∏ –Ω–µ—Ç ;-)
–û–±—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç–æ–º, —á—Ç–æ —Ç—ã –ø–∏—à–µ—à—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã, –∞ —è –ø–∏—à—É —Ç–µ–±–µ —Å—Ç–æ–ª–∏—Ü—É –∏ –ø—Ä–∏—Å—ã–ª–∞—é –∫–∞—Ä—Ç—É —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã
–ï—Å–ª–∏ —Ç—ã —á—Ç–æ-–Ω–∏–±—É–¥—å –∑–∞–±—É–¥–µ—à—å, –º–æ–∂–µ—à—å –≤—Å–µ–≥–¥–∞ –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help
–ï—Å–ª–∏ —Ç—ã –∑–∞—Ö–æ—á–µ—à—å –≤—Å–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /stop
    ''')
    user_data["mode"] = 0
    user_data["dont_changed_mode"] = 1
    user_data["game"] = 0


def exit(bot, update, user_data):
    if user_data["good"] != 0 or user_data["bad"] != 0:
        update.message.reply_text("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:\n–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤ {}.\n‚úÖ–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö - {}\n‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö - {}.".format(
            user_data["good"] + user_data["bad"], user_data["good"], user_data["bad"]))
        if user_data["hints_all"]:
            update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ - {}".format(user_data["hints_all"]))
        else:
            update.message.reply_text("–¢—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø–æ–¥—Å–∫–∞–∑–∫–∏.")
        update.message.reply_text("–ù–∞–¥–µ—é—Å—å, —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ç–µ—Å—Ç.üòä\n–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É.")
    else:
        update.message.reply_text("–•–æ—Ä–æ—à–æ. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É.")
    user_data["mode"] = 0
    return ConversationHandler.END


def hint_text_test(bot, update, user_data):
    variants = [user_data["country"]]
    for i in range(2):
        country = random.choice(list(info.keys()))
        while country in variants:
            country = random.choice(list(info.keys()))
        variants.append(country)
    reply_keyboard = list(map(lambda x: [x],variants))
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text("–û–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –≤–µ—Ä–Ω—ã–π:\n{}".format('\n'.join(variants)), reply_markup = markup)


def text_test(bot, update, user_data):
    if user_data["mode"] == 0:
        user_data["mode"] = 1
        update.message.reply_text("–ò—Ç–∞–∫, –Ω–∞–ø–æ–º–∏–Ω–∞—é. –Ø –ø—Ä–∏—Å—ã–ª–∞—é —Ç–µ–±–µ —Å—Ç–æ–ª–∏—Ü—É, –∞ —Ç—ã –ø–∏—à–µ—à—å —Å—Ç—Ä–∞–Ω—É."
                                  "\n–ï—Å–ª–∏ —Ç–µ–±–µ –Ω–∞–¥–æ–µ—Å—Ç, –Ω–∞–ø–∏—à–∏ /exit.")
        update.message.reply_text("–ù–∞—á–Ω–µ–º? (–æ—Ç–≤–µ—Ç—å –¥–∞ –∏–ª–∏ –Ω–µ—Ç)")
        user_data["good"] = 0
        user_data["bad"] = 0
        user_data["hints_all"] = 0
        return 1
    else:
        reply_keyboard = [["–î–∞", "–ù–µ—Ç"]]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        update.message.reply_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–µ–∞–Ω—Å?", reply_markup=markup)
        user_data["mode"] = 7


def question_text_test(bot, update, user_data):
    answer = update.message.text.lower()
    if answer == "–¥–∞":
        country = random.choice(list(info.keys()))
        capital = info[country]
        user_data["country"] = country
        user_data["question_now"] = capital
        if country == "–ù–∞—É—Ä—É":
            update.message.reply_text("–£ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã –Ω–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Å—Ç–æ–ª–∏—Ü—ã?\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–∑—è—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É - –ø–∏—à–∏ '–ø–æ–¥—Å–∫–∞–∑–∫–∞'")
        else:
            update.message.reply_text("–ö–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã —Å—Ç–æ–ª–∏—Ü–∞ {} ...?\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–∑—è—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É - –ø–∏—à–∏ '–ø–æ–¥—Å–∫–∞–∑–∫–∞'".format(capital))
        user_data["hint"] = False
        return 2
    elif answer == "–Ω–µ—Ç":
        return exit(bot, update, user_data)
    else:
        update.message.reply_text("–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ (—è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –¥–∞ –∏–ª–∏ –Ω–µ—Ç).")
        return 1


def answer_text_test(bot, update, user_data):
    hint = False
    if user_data["mode"] ==1:
        if user_data["dont_changed_mode"]:
            answer = update.message.text
            true_answer = user_data["country"]
            if answer.lower() == "–ø–æ–¥—Å–∫–∞–∑–∫–∞":
                if not user_data["hint"]:
                    hint_text_test(bot, update, user_data)
                    user_data["hints_all"] += 1
                    user_data["hint"] = True
                else:
                    update.message.reply_text("–¢—ã —É–∂–µ –±—Ä–∞–ª –ø–æ–¥—Å–∫–∞–∑–∫—É –Ω–∞ —ç—Ç–æ–º –≤–æ–ø—Ä–æ—Å–µ!")
                hint = True
            else:
                if answer.lower() == true_answer.lower():
                    if hint:
                        update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!", reply_markup=ReplyKeyboardRemove())
                    else:
                        update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
                    user_data["good"] += 1
                else:
                    if hint:
                        update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ", reply_markup=ReplyKeyboardRemove())
                    else:
                        update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                    user_data["bad"] += 1
                photo(bot, update, user_data["country"], True)
        if not hint:
            update.message.reply_text("–ü—Ä–æ–¥–æ–ª–∂–∏–º? (–æ—Ç–≤–µ—Ç—å –¥–∞ –∏–ª–∏ –Ω–µ—Ç)")
            user_data["dont_changed_mode"] = 1
            return 1
        return 2
    else:
        return change_mode(bot, update, user_data, 1)


def photo_test(bot, update, user_data):
    if user_data["mode"] == 0:
        user_data["mode"] = 3
        update.message.reply_text("–ò—Ç–∞–∫, –Ω–∞–ø–æ–º–∏–Ω–∞—é. –Ø –ø—Ä–∏—Å—ã–ª–∞—é —Ç–µ–±–µ –∫–∞—Ä—Ç—É —Å—Ç—Ä–∞–Ω—ã, –∞ —Ç—ã –ø–∏—à–µ—à—å —Å—Ç–æ–ª–∏—Ü—É."
                                  "\n–ï—Å–ª–∏ —Ç–µ–±–µ –Ω–∞–¥–æ–µ—Å—Ç, –Ω–∞–ø–∏—à–∏ /exit.")
        update.message.reply_text("–ù–∞—á–Ω–µ–º? (–æ—Ç–≤–µ—Ç—å –¥–∞ –∏–ª–∏ –Ω–µ—Ç)")
        user_data["good"] = 0
        user_data["bad"] = 0
        user_data["hints_all"] = 0
        return 3
    else:
        reply_keyboard = [["–î–∞","–ù–µ—Ç"]]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        update.message.reply_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–µ–∞–Ω—Å?", reply_markup=markup)
        user_data["mode"] = 7


def question_photo_test(bot, update, user_data):
    answer = update.message.text.lower()
    if answer == "–¥–∞":
        country = random.choice(list(info.keys()))
        user_data["question_now"] = country
        update.message.reply_text("–°—Ç–æ–ª–∏—Ü–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã - ...? (–°–µ–π—á–∞—Å –ø—Ä–∏—à–ª—é –∫–∞—Ä—Ç—É)\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–∑—è—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É - –ø–∏—à–∏ '–ø–æ–¥—Å–∫–∞–∑–∫–∞'")
        photo(bot, update, country)
        user_data["hint"] = False
        return 4
    elif answer == "–Ω–µ—Ç":
        return exit(bot, update, user_data)
    else:
        update.message.reply_text("–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ (—è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –¥–∞ –∏–ª–∏ –Ω–µ—Ç).")
        return 3


def hint_photo_test(bot, update, user_data):
    variants = [info[user_data["question_now"]]]
    for i in range(2):
        capital = random.choice(list(info.values()))
        while capital in variants:
            capital = random.choice(list(info.values()))
        variants.append(capital)
    reply_keyboard = list(map(lambda x: [x],variants))
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text("–û–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –≤–µ—Ä–Ω—ã–π:\n{}".format('\n'.join(variants)),reply_markup=markup)


def answer_photo_test(bot, update, user_data):
    hint = False
    if user_data["mode"] == 3:
        if user_data["dont_changed_mode"]:
            answer = update.message.text.lower()
            true_answer = info[user_data["question_now"]]
            if answer == '–ø–æ–¥—Å–∫–∞–∑–∫–∞':
                if not user_data["hint"]:
                    hint_photo_test(bot,update,user_data)
                    user_data["hints_all"] += 1
                    user_data["hint"] = True
                else:
                    update.message.reply_text("–¢—ã —É–∂–µ –±—Ä–∞–ª –ø–æ–¥—Å–∫–∞–∑–∫—É –Ω–∞ —ç—Ç–æ–º –≤–æ–ø—Ä–æ—Å–µ!")
                hint = True
            else:
                if answer == true_answer.lower():
                    update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
                    user_data["good"] += 1
                else:
                    update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                    user_data["bad"] += 1
                photo(bot, update, user_data["question_now"], True)
        if not hint:
            update.message.reply_text("–ü—Ä–æ–¥–æ–ª–∂–∏–º? (–æ—Ç–≤–µ—Ç—å –¥–∞ –∏–ª–∏ –Ω–µ—Ç)")
            user_data["dont_changed_mode"] = 1
            return 3
        return 4
    else:
        return change_mode(bot, update, user_data, 3)


def game(bot, update, user_data):
    if user_data["mode"] == 0:
        update.message.reply_text(
            "–ò—Ç–∞–∫, –Ω–∞–ø–æ–º–∏–Ω–∞—é. –Ø –ø—Ä–∏—Å—ã–ª–∞—é –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—Å—Ç—Ä–∞–Ω–∞ - —Å—Ç–æ–ª–∏—Ü–∞', –∞ —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ"
            " –≤–µ—Ä–∏—à—å –∏–ª–∏ –Ω–µ—Ç")
        update.message.reply_text("–ù–∞—á–Ω–µ–º? (–æ—Ç–≤–µ—Ç—å –¥–∞ –∏–ª–∏ –Ω–µ—Ç)")
        user_data["good"] = 0
        user_data["bad"] = 0
        user_data["mode"] = 5
        user_data["game"] = True
        return 5
    else:
        reply_keyboard = [["–î–∞","–ù–µ—Ç"]]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        update.message.reply_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–µ–∞–Ω—Å?", reply_markup=markup)
        user_data["mode"] = 7


def question_game(bot, update, user_data):
    answer = update.message.text.lower()
    if answer == "–¥–∞":
        question = random.choice(list(info.keys()))
        user_data["question"] = question
        variants = [info[random.choice(list(info.keys()))] for i in range(2)] + [info[question]]
        variant = random.choice(variants)
        user_data["variant"] = variant
        update.message.reply_text("{} - {}".format(question, variant))
        reply_keyboard = [["–í–µ—Ä—é", "–ù–µ –≤–µ—Ä—é"]]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        update.message.reply_text("–í–µ—Ä–∏—à—å?", reply_markup=markup)
        return 6
    elif answer == "–Ω–µ—Ç":
        return exit_game(bot, update, user_data)
    else:
        update.message.reply_text("–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ (—è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –¥–∞ –∏–ª–∏ –Ω–µ—Ç).")
        return 5


def answer_game(bot, update, user_data):
    if user_data["mode"] == 5:
        if user_data["dont_changed_mode"]:
            answer = update.message.text
            true_answer = info[user_data["question"]]
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ç–æ–ª–∏—Ü—ã –∏ —Ç–æ–π —Å—Ç–æ–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–∞–ª–∞
            conformity = bool(true_answer == user_data["variant"])
            if conformity:
                if answer.lower() == "–≤–µ—Ä—é":
                    update.message.reply_text("–ú–æ–ª–æ–¥–µ—Ü!")
                    user_data["good"] += 1
                elif answer.lower() == "–Ω–µ –≤–µ—Ä—é":
                    update.message.reply_text("–ê –∑—Ä—è!")
                    user_data["bad"] += 1
                else:
                    update.message.reply_text("–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –≤–µ—Ä—é –∏ –Ω–µ –≤–µ—Ä—é")
                    return 6
            else:
                if answer.lower() == "–≤–µ—Ä—é":
                    update.message.reply_text("–ó—Ä—è, —è —Ç–µ–±—è –æ–±–º–∞–Ω—É–ª!")
                    user_data["bad"] += 1
                elif answer.lower() == "–Ω–µ –≤–µ—Ä—é":
                    update.message.reply_text("–ò –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
                    user_data["good"] += 1
                else:
                    update.message.reply_text("–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –≤–µ—Ä—é –∏ –Ω–µ –≤–µ—Ä—é")
                    return 6
            photo(bot, update, user_data["question"], text_map=True)
        update.message.reply_text("–ü—Ä–æ–¥–æ–ª–∂–∏–º? –æ—Ç–≤–µ—Ç—å –¥–∞ –∏–ª–∏ –Ω–µ—Ç", reply_markup=ReplyKeyboardRemove())
        return 5
    else:
        return change_mode(bot, update, user_data, 3)


def exit_game(bot, update, user_data):
    if user_data["good"] != 0 or user_data["bad"] != 0:
        update.message.reply_text("–ü–æ–¥–≤–µ–¥–µ–º –∏—Ç–æ–≥–∏ –∏–≥—Ä—ã:\n‚úÖ–£–≥–∞–¥–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ - {}\n‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - {}".format(
            user_data["good"], user_data["bad"]
        ))
        update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –ù–∞–¥–µ—é—Å—å, —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.üòä\n–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É.")
    else:
        update.message.reply_text("–•–æ—Ä–æ—à–æ. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É.")
    user_data["mode"] = 0
    return ConversationHandler.END


def change_mode(bot,update, user_data,num):
    answer = update.message.text
    if answer.lower() == "–¥–∞":
        user_data["mode"] = 0
        if user_data["game"]:
            return exit_game(bot,update,user_data)
        return exit(bot,update,user_data)
    elif answer.lower() == '–Ω–µ—Ç':
        user_data["mode"] = num
        user_data["dont_changed_mode"] = 0
        update.message.reply_text("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å–æ—Ü-–æ–ø—Ä–æ—Å. –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
        return num+1
    else:
        update.message.reply_text("–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –¥–∞ –∏–ª–∏ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        change_mode(bot, update, user_data)


def teach(bot, update, args):
    if args:
        address = args[0].capitalize()
        if address not in info:
            update.message.reply_text("–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã –Ω–µ—Ç")
        else:
            photo(bot, update, address, True)
    else:
        update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞—é —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ - /teach *—Å—Ç—Ä–∞–Ω–∞*")


def help(bot, update):
    update.message.reply_text('''
–ß—Ç–æ —è —É–º–µ—é:
/text_test - –¢–µ—Å—Ç ‚Ññ1 - —è –ø–∏—à—É —Ç–µ–±–µ —Å—Ç–æ–ª–∏—Ü—É, –∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –≤ –æ—Ç–≤–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Å—Ç—Ä–∞–Ω—É
/photo_test - –¢–µ—Å—Ç ‚Ññ2 - —è –ø—Ä–∏—Å—ã–ª–∞—é —Ç–µ–±–µ –∫–∞—Ä—Ç—É —Å—Ç—Ä–∞–Ω—ã, –∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –≤ –æ—Ç–≤–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –µ–µ —Å—Ç–æ–ª–∏—Ü—É
/game - –∏–≥—Ä–∞ "–í–µ—Ä—é - –Ω–µ –≤–µ—Ä—é" - —è –ø—Ä–∏—Å—ã–ª–∞—é —Ç–µ–±–µ –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—Å—Ç—Ä–∞–Ω–∞ - —Å—Ç–æ–ª–∏—Ü–∞", –∞ —Ç—ã –æ—Ç–≤–µ—á–∞–µ—à—å - –≤–µ—Ä–∏—à—å –∏–ª–∏ –Ω–µ—Ç
/teach *—Å—Ç—Ä–∞–Ω–∞* - –æ–±—É—á–µ–Ω–∏–µ - —Ç—ã –ø–∏—à–µ—à—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã, –∞ —è –ø–∏—à—É —Ç–µ–±–µ —Å—Ç–æ–ª–∏—Ü—É –∏ –ø—Ä–∏—Å—ã–ª–∞—é –∫–∞—Ä—Ç—É —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã
–ï—Å–ª–∏ —Ç—ã –∑–∞—Ö–æ—á–µ—à—å –≤—Å–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /stop
''')


def geocode(address):
    response = None
    try:
        geocoder_uri = geocoder_request_template = "http://geocode-maps.yandex.ru/1.x/"
        response = requests.get(geocoder_uri, params={
            "format": "json",
            "geocode": address
        })
        if response:
            if not response.json()["response"]["GeoObjectCollection"]["featureMember"]:
                return
            else:
                toponym = response.json()["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]

                ll, spn = get_ll_spn(toponym)

                static_api = "http://static-maps.yandex.ru/1.x/?"
                static_api_params = "ll={}&spn={}&l=map&pt={}".format(','.join(ll), ','.join(spn),
                                                                      ','.join(ll) + ",pm2ntm")
                static_api_request = ''.join([static_api, static_api_params])
                return static_api_request
        return
    except:
        return


def stop(bot, update):
    update.message.reply_text("–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —Ç—ã —É—Ö–æ–¥–∏—à—å. –î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏!")


def main():
    updater = Updater("529825050:AAELw42tGUsiCHecC10H86rontm0Dv1cPnU")

    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start, pass_user_data=True))
    dp.add_handler(CommandHandler("stop", stop))
    dp.add_handler(CommandHandler("help", help))
    dp.add_handler(CommandHandler("teach", teach, pass_args=True))
    conver_handler_text_test = ConversationHandler(
        entry_points=[CommandHandler("text_test", text_test, pass_user_data=True)],
        states={

            1: [MessageHandler(Filters.text, question_text_test, pass_user_data=True)],
            2: [MessageHandler(Filters.text, answer_text_test, pass_user_data=True)]
        },
        fallbacks=[CommandHandler("exit", exit, pass_user_data=True)]

    )
    dp.add_handler(conver_handler_text_test)

    conver_handler_photo_test = ConversationHandler(
        entry_points=[CommandHandler("photo_test", photo_test, pass_user_data=True)],
        states={
            3: [MessageHandler(Filters.text, question_photo_test, pass_user_data=True)],
            4: [MessageHandler(Filters.text, answer_photo_test, pass_user_data=True)]
        },
        fallbacks=[CommandHandler("exit", exit, pass_user_data=True)]
    )
    dp.add_handler(conver_handler_photo_test)

    conver_handler_game = ConversationHandler(
        entry_points=[CommandHandler("game", game, pass_user_data=True)],
        states={
            5: [MessageHandler(Filters.text, question_game, pass_user_data=True)],
            6: [MessageHandler(Filters.text, answer_game, pass_user_data=True)]
        },
        fallbacks=[CommandHandler("exit", exit_game, pass_user_data=True)]
    )
    dp.add_handler(conver_handler_game)
    print('bot started')
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    info = file_reader("capitals1.txt")
    main()